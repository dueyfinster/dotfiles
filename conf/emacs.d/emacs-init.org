#+TITLE: Emacs configuration file
#+AUTHOR: Neil Grogan
#+BABEL: :cache yes

* Packages
** Package Repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC

** Security
   Inspired by [[https://ogbe.net/emacsconfig.html][ogbe.net]] and [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor Is Malware]].
*** Check TLS
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust t)
  (setq gnutls-verify-error t)
#+END_SRC

** Automatic package installation
*** Install =use-package=
And its dependencies if needed.
#+BEGIN_SRC emacs-lisp
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (progn
         (package-refresh-contents)
         (package-install package))))
 '(use-package diminish bind-key))
#+END_SRC
*** Trigger =use-package=
And force the install of missing packages.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC

*** OLD Packages
   #+BEGIN_SRC emacs-lisp
   (let* ((package--builtins nil)
	  (packages
	   '(auto-compile         ; automatically compile Emacs Lisp libraries
	     gnuplot              ; GNU Charting program
	     idle-require         ; load elisp libraries while Emacs is idle
	     try)))        				; Display available keybindings in popup
     (ignore-errors ;; This package is only relevant for Mac OS X.
       (when (memq window-system '(mac ns))
	 (push 'exec-path-from-shell packages)
	 (push 'reveal-in-osx-finder packages))
       (let ((packages (remove-if 'package-installed-p packages)))
	 (when packages
	   ;; Install uninstalled packages
	   (package-refresh-contents)
	   (mapc 'package-install packages)))))
   #+END_SRC
* Theme
 #+BEGIN_SRC emacs-lisp
(use-package solarized-theme :config (load-theme 'solarized-dark t))
#+END_SRC

* Quickly edit this config file
#+BEGIN_SRC emacs-lisp
  (defun edit-config-file ()
    (interactive)
    (find-file (concat config-load-path "configuration.org")))
#+END_SRC

* Defaults
** Sane Defaults
Sets all the defaults we need
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t           ; No startup message
custom-file (make-temp-file "")    ; Discard customization's
initial-scratch-message nil       ; Clean scratch buffer
recentf-max-saved-items 200       ; Show more recent files
ring-bell-function 'ignore        ; Quiet
)

(setq recentf-exclude
        '("^/tmp\\.*" "^/private\\.*" "^/var/folders\\.*" "/TAGS$"))
#+END_SRC

** Backup and autosave
To avoid doing this each time a change is made we can add a function to
the =after-save-hook= ensuring to always tangle and byte-compile the
=org=-document after changes.

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'emacs-init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "emacs-init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "emacs-init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

By default, emacs writes a backup file next to the file being editing
with a trailing =~= turd.
#+BEGIN_SRC emacs-lisp
;; store all autosave files in the tmp dir
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; backups in backup dir
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backup"))
      delete-old-versions t
      kept-new-versions 24
      kept-old-versions 12
      version-control t)

(setq create-lockfiles nil)
#+END_SRC

** Mac OS X
I run this configuration mostly on Mac OS X, so we need a couple of
settings to make things work smoothly. In the package section
=exec-path-from-shell= is included (only if you're running OS X), this is
to include environment-variables from the shell. It makes using Emacs
along with external processes a lot simpler. I also prefer using the
=Command=-key as the =Meta=-key.

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (setq ns-pop-up-frames nil
        x-select-enable-clIpboard t)
  (exec-path-from-shell-initialize)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))'
#+END_SRC

** Require
Some features are not loaded by default to minimize initialization time,
so they have to be required (or loaded, if you will). =require=-calls
tends to lead to the largest bottleneck's in a
configuration. =idle-require= delays the =require=-calls to a time where
Emacs is in idle. So this is great for stuff you eventually want to load,
but is not a high priority.

#+BEGIN_SRC emacs-lisp
(require 'idle-require)             ; Need in order to use idle-require

(dolist (feature
         '(auto-compile             ; auto-compile .el files
           recentf))                  ; recently opened files
  (idle-require feature))

(setq idle-require-idle-delay 5)
(idle-require-mode 1)
#+END_SRC
** Modes
There are some modes that are enabled by default that I don't find
particularly useful. We create a list of these modes, and disable all of
these.

#+BEGIN_SRC emacs-lisp
(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room for text
           scroll-bar-mode              ; No scroll bars either
           blink-cursor-mode))          ; The blinking cursor gets old
  (funcall mode 0))
#+END_SRC

Enable useful modes:
#+BEGIN_SRC emacs-lisp
(dolist (mode
      '(abbrev-mode                  ; E.g. sopl -> System.out.println
        column-number-mode           ; Show column number in mode line
        delete-selection-mode        ; Replace selected text
        dirtrack-mode                ; directory tracking in *shell*
        global-prettify-symbols-mode ; Greek letters should look greek
        recentf-mode                 ; Recently opened files
        show-paren-mode))             ; Available keybindings in popup
(funcall mode 1))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :defer t
  :demand
  :diminish helm-mode
    :bind (("C-x C-r" . helm-recentf)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-c h" . helm-command-prefix)
           ("<tab>" . helm-execute-persistent-action)
           ("C-i" . helm-execute-persistent-action)
           ("C-z" . helm-select-action)
          )
    :config (setq projectile-project-search-path '("~/repos/" "~/.dotfiles/"))
            (setq helm-split-window-inside-p t
                  helm-M-x-fuzzy-match t
                  helm-buffers-fuzzy-matching t
                  helm-recentf-fuzzy-match t
                  helm-move-to-line-cycle-in-source t
                  projectile-completion-system 'helm)

            (set-face-attribute 'helm-selection nil :background "cyan")
            (helm-mode 1)
            (helm-adaptive-mode 1))

(use-package helm-rg)
(use-package helm-system-packages)
#+END_SRC

* Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode 1))
#+END_SRC

* Company Mode
Company mode provides auto completion for editing.
#+BEGIN_SRC emacs-lisp
(use-package company
    :diminish company-mode
    :bind (("C-d" . company-show-doc-buffer)
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous)
           ("<tab>" . company-complete))
    :config
    (add-hook 'after-init-hook 'global-company-mode)
   (setq company-idle-delay 0
      company-echo-delay 0
      company-dabbrev-downcase nil
      company-minimum-prefix-length 2
      company-selection-wrap-around t
      company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance)))
(use-package helm-company)
#+END_SRC

** Enable =company-jedi=
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :config (add-to-list 'company-backends 'company-jedi))
#+END_SRC

* Git
Git client inside of Emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :init (progn
           (bind-key "C-x g" 'magit-status)
           ))
#+END_SRC

#+RESULTS:

Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
    :ensure t
    :init
      (global-git-gutter-mode t)
    :config
    (dolist (p '((git-gutter:added    . "#0c0")
                (git-gutter:deleted  . "#c00")
                (git-gutter:modified . "#c0c")))
     (set-face-foreground (car p) (cdr p))
     (set-face-background (car p) (cdr p))))
#+END_SRC

* Org Mode
Default settings for orgmode, such as where files are located:
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
(use-package org
    :ensure t
    :pin org)

(setq org-completion-use-ido nil)
;; Set to the location of your Org files on your local system
(setq org-directory "~/Dropbox/org")
(setq org-agenda-files '("~/Dropbox/org/inbox.org"
                      "~/Dropbox/org/gtd.org"
                      "~/Dropbox/org/tickler.org"))

(setq org-capture-templates '(("t" "Todo [inbox]" entry
                            (file+headline "~/Dropbox/org/inbox.org" "Tasks")
                            "* TODO %i%?")
                          ("T" "Tickler" entry
                            (file+headline "~/Dropbox/org/tickler.org" "Tickler")
                            "* %i%? \n %U")))

(setq org-refile-targets '(("~/Dropbox/org/gtd.org" :maxlevel . 3)
                        ("~/Dropbox/org/someday.org" :level . 1)
                        ("~/Dropbox/org/tickler.org" :maxlevel . 2)))

(setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

Key bindings for orgmode.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

Enable babel to use different languages in orgmode:

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
'org-babel-load-languages
'((emacs-lisp . t)
  (ditaa . t)
  (gnuplot . t)
  (ledger . t)
  (java . t)
  (python . t)
  (ruby . t)
  (shell . t)))
#+END_SRC

When editing org-files with source-blocks, we want the source blocks to
be themed as they would in their native mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

Add org-bullets:
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Display images inline
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :bind ("C-c p" . projectile-command-map)
  :config
  (projectile-mode))
#+END_SRC

With a twist of helm
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :bind (("C-c v" . helm-projectile)
         ("C-c C-v" . helm-projectile-ag)
         ("C-c w" . helm-projectile-switch-project)))
#+END_SRC

* Programming Languages & Markup
** EditorConfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
    :config (editorconfig-mode 1))
#+END_SRC
** Erlang
#+BEGIN_SRC emacs-lisp
(use-package erlang
    :mode ("\\.[eh]rl\\'" . erlang-mode))

(use-package company-erlang
  :config
(add-hook 'erlang-mode-hook #'company-erlang-init))
#+END_SRC

** Markdown
For editing markdown files...
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands markdown-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC

** Python
** YAML
Yet Another Markup Language
#+BEGIN_SRC
(use-package yaml-mode
  :ensure t
  :commands yaml-mode
  :init
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode)))
#+END_SRC
