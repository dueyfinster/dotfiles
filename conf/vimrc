" __      ___
" \ \    / (_)
"  \ \  / / _ _ __ ___  _ __ ___
"   \ \/ / | | '_ ` _ \| '__/ __|
"    \  /  | | | | | | | | | (__
"     \/   |_|_| |_| |_|_|  \___|
"
set nocompatible              " be iMproved, required
filetype off                  " required

" {{{ Minpac
" Try to load minpac.
silent! packadd minpac

if !exists('*minpac#init')
  " No plugins are available
  finish
else
  call minpac#init()
  call minpac#add('airblade/vim-rooter') " Changes to working dir
  call minpac#add('editorconfig/editorconfig-vim')
  call minpac#add('mbbill/undotree') " adds undo visualiser
  call minpac#add('kana/vim-arpeggio') " Allows keys to be pressed at the same time

  " Finding Files / Grep-like {{{
  ""
  call minpac#add('mileszs/ack.vim') " Find code
  call minpac#add('junegunn/fzf', {'do': '!./install --all'})
  call minpac#add('junegunn/fzf.vim')
  ""
  " call minpac#add('rking/ag.vim') " Find code - Seems to be deprecated
  call minpac#add('scrooloose/nerdtree') " file browser
  call minpac#add('ctrlpvim/ctrlp.vim') " Search through files, buffers etc
  " }}}

  " {{{ Shells and Runners
  call minpac#add('benmills/vimux') " Interact with tmux in vim
  call minpac#add('thinca/vim-quickrun') " Run Commands Quickly
  " }}}

  " Source Control & Tags {{{
  call minpac#add('tpope/vim-fugitive') " Git support
  call minpac#add('airblade/vim-gitgutter') " Git Gutter support
  call minpac#add('xolox/vim-misc')
  " call minpac#add('xolox/vim-easytags')
  call minpac#add('ludovicchabant/vim-gutentags') " regenerates CTAGS
  call minpac#add('majutsushi/tagbar') " Viewing source tree easier
  " }}}

  "call minpac#add('bling/vim-airline')" Better status bar
  call minpac#add('tpope/vim-sensible') " Sensible defaults
  call minpac#add('tpope/vim-commentary') " Vim comments
  call minpac#add('tpope/vim-sleuth') " automatic spacing
  call minpac#add('tpope/vim-surround') " Adds support for modifying surrounds
  call minpac#add('tpope/vim-unimpaired') " Adds support for quick jumps in quickfix window

  " {{{ Snippets
  call minpac#add('SirVer/ultisnips')
  call minpac#add('honza/vim-snippets')
  " }}}

  " Colorschemes
  call minpac#add('tomasr/molokai')
  call minpac#add('altercation/vim-colors-solarized') "Solarized colourscheme

  " Language Support
  " call minpac#add('klen/python-mode') " Python lang support
  call minpac#add('leafgarland/typescript-vim') " typescript support
  call minpac#add('ledger/vim-ledger') " Ledger accounting support
  call minpac#add('mitermayer/vim-prettier', {
        \ 'do': '!npm install',
        \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss'] } )

  packloadall

  " Chords Settings {{{
  if exists("arpeggio*")
    call arpeggio#load()
    let g:arpeggio_timeoutlen = 70

    Arpeggio inoremap jk <ESC>
    Arpeggio onoremap jk <ESC>
    Arpeggio vnoremap jk <ESC>
  endif
  " }}}
endif

" Define user commands for updating/cleaning the plugins.
" Each of them loads minpac, reloads .vimrc to register the
" information of plugins, then performs the task.
command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update()
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()
" }}}

" Map leader key
let mapleader = ","

set mouse=a " Turn mouse support on
set nrformats= " Treat all numbers as decimal
set nocompatible " choose no compatibility with legacy vi
syntax enable
set encoding=utf-8
set nu
set omnifunc=syntaxcomplete#Complete " Turn on autocomplete
set showcmd " display incomplete commands
" Don't make backups at all
set nobackup
set nowritebackup


" Set Cache Settings {{{
let b:gutentags_tagfile = '.git/tags'
set tags=./tags;/

" Store persistent undo
if has("persistent_undo")
 set undofile
 set undolevels=1000         " How many undos
 set undoreload=10000        " number of lines to save for undo
endif
" }}}

if has("unix")
    set directory=/tmp/
    set undodir=/tmp/
elseif has("win32") || has("win64")
    if isdirectory("C:/Temp")
        set directory=C://Temp
        set undodir=C://Temp
    else
        set directory=$HOME
        set undodir=$HOME
    endif
endif

" {{{ Spelling Settings
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd FileType gitcommit setlocal spell
set spelllang=en_gb
set complete+=kspell
" nmap <silent> <leader>s :set spell!<CR>
" }}}

" colorscheme {{{
" https://gist.github.com/XVilka/8346728#detection
if has('termguicolors') && $COLORTERM =~# '^\(truecolor\|24bit\)$'
  if &t_8f ==# '' || &t_8b ==# ''
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
  set termguicolors
endif

try
  if &termguicolors || has('gui_running')
    set background=dark
    colorscheme solarized
  elseif &t_Co == 256
    set background=dark
    colorscheme solarized
    " let g:solarized_termtrans=1
    " let g:solarized_termcolors=256
  endif
catch
  set termguicolors&
  colorscheme slate
endtry

map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" }}}

" PyMode {{{
" BUG: https://github.com/klen/python-mode/issues/525
let g:pymode_rope = 0
let g:pymode_rope_lookup_project = 0
" }}}


set backspace=indent
set backspace+=eol
set backspace+=start

" vimrc editing shortcuts {{{
" Edit vimrc with <leader> vv
nnoremap <leader>vh :e $MYVIMRC<CR>
nnoremap <leader>vv :e ~/.dotfiles/conf/vimrc<CR>

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost vimrc source $MYVIMRC
endif
" }}}


" Move to last edited line if buffer reopened
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif


" Remap ESC to be easier to type
inoremap kj <Esc>
inoremap jj <Esc>

" Reselect block after indent
vnoremap < <gv
vnoremap > >gv

" Shortcut to rapidly toggle `set list`
:nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" switch to last used buffer, map to CTRL-E
:nmap <C-e> :e#<CR>

" next and previous buffers CTRL-P & CTRL-N
:nmap <C-n> :bnext<CR>
:nmap <C-p> :bprev<CR>

" Copy and Paste / Clipboard {{{
" Set up copy and paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif
" }}}

" wrap lines
:nmap \w :setlocal wrap!<CR>:setlocal wrap?<CR>

" Don't warn when switching unsaved buffers
set hidden

" Split Settings
set splitbelow
set splitright

" Win Settings
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Save as root
cmap w!! w !sudo tee % > /dev/null


" enforce purity for arrow keys
noremap  <Up> <Nop>
noremap  <Down> <Nop>
noremap  <Left> <Nop>
noremap  <Right> <Nop>


" TERMINAL {{{

if has('terminal')
	" Enter terminal-normal mode using two ESCs
	tnoremap <Esc><Esc> <C-\><C-n>

	" Set terminal colour
	hi Terminal ctermbg=black
	"  hi Terminal ctermbg=lightgrey ctermfg=blue guibg=lightgrey guifg=blue

	" Create a terminal buffer in
	"	- current window : SPACE+c
	"	- split          : SPACE+s
	"	- 1/5th split   : SPACE+t
	"	- 1/3rd vsplit   : SPACE+v
	"	- new tab        : SPACE+t
	nnoremap <Space>c :term ++curwin<CR>
	nnoremap <Space>s :term<CR>
	nnoremap <Space>t :execute "rightbelow" . float2nr(0.20 * winheight(0)) . "split <bar> :term ++curwin"<CR>
	nnoremap <Space>v :execute "rightbelow" . float2nr(0.33 * winwidth(0)) . "vsplit <bar> :term ++curwin"<CR>
	nnoremap <Space>t :execute ":tabnew <bar> term ++curwin"<CR>

	" Send key-sequence to a terminal window using SPACE+e
	command! -nargs=+ SendKeys :call term_sendkeys(bufnr("bash"), <q-args>."\<CR>")
	nnoremap <Space>e :SendKeys<Space>
	command! RepeatCommand :call term_sendkeys(bufnr("bash"), "\<C-p>\<CR>")
	nnoremap <Space>r :RepeatCommand<CR>
endif

" }}}

" PLUGIN SETTINGS {{{
"""""""""""""""""

" fugitive git bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gg :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :! git push<CR>
nnoremap <space>gpl :! git pull<CR>

" Pastebin Settings {{{
" TODO:
" nmap <Tab>ef :exec "w !|curl vpaste.net -F 'text='<cr>
" nmap <Tab>ep  :bel vnew  <bar> r!curl -\# vpaste.net/?raw<left><left><left><left>
" nmap <Tab>epf :bel vnew  <bar> r!curl vpaste.net -F 'text='<left>
" }}}


" NERDTREE Settings {{{
map <Leader>e :NERDTreeToggle<CR>
nmap <Leader>n :NERDTreeFind<CR>
" }}}

" {{{ QuickRun Settings
let g:quickrun_config = {
  \ "_" : {
  \   "outputter/buffer/split" : ":botright 8sp",
  \   "outputter/buffer/close_on_empty" : 1
  \ },
  \ 'typescript' : {
  \ 'command': 'npm',
  \  'exec' : '%c test -- -p %S:t:r',
  \  'hook/cd/directory': '%S:p:h',
  \}
\}
let g:quickrun_config.python = {
\       "command" : "python3",
\}

" let g:quickrun_config[
" au! BufNewFile,BufRead *.ts call s:RunTS()

" function! s:RunTS()
"   if match(expand('%:p'), 'Shield')
"     let s:wd = expand('%:p:h')
"     let b:quickrun_config = get(get(g:, 'quickrun_config', {}), 'typescript', {})
"     echom(s:wd)
"     let b:quickrun_config['hook/cd/directory'] = s:wd
"     let b:quickrun_config['hook/cd'] = s:wd
"     let b:quickrun_config.exec = "npm test -- -p ".expand('%:t:r')
"   endif
" endfunction

nnoremap <silent> <Leader>r :<C-u>QuickRun<CR>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<C-c>"
" }}}

" CTRL-P Settings {{{
let g:ctrlp_extensions = ['changes', 'line', 'quickfix', 'tag']

nnoremap [ctrlp] <nop>
nmap     <Leader>c [ctrlp]
nnoremap <silent> [ctrlp]b :<C-u>CtrlPBuffer<CR>
nnoremap <silent> [ctrlp]c :<C-u>CtrlPChangeAll<CR>
nnoremap <silent> [ctrlp]f :<C-u>CtrlP<CR>
nnoremap <silent> [ctrlp]l :<C-u>CtrlPLine<CR>
nnoremap <silent> [ctrlp]r :<C-u>CtrlPMRU<CR>
nnoremap <silent> [ctrlp]t :<C-u>CtrlPTag<CR>

let g:ctrlp_user_command = {}
let g:ctrlp_user_command.types = {
      \   1: ['.git', 'git --git-dir=%s/.git ls-files -co --exclude-standard'],
      \ }
" :let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|\v\~$|\.(o|swp|pyc|wav|mp3|ttf|ogg|blend|jar|class)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'

if executable('ag')
  let g:ctrlp_user_command.fallback = 'ag %s --nocolor --nogroup -g ""'
  " :let g:ctrlp_user_command = 'rg %s --files --color=never ""'
  " :let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif
" }}}

" {{{ FZF & RIPGREP
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>

" Search word under cursor with Ack
nmap <M-k> :Ack! "\b<cword>\b" <CR>
nmap <Esc>k :Ack! "\b<cword>\b" <CR>
" Close quickfix window
nmap \x :cclose<CR>
nmap \c :bd<CR>


let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --color "always"
  \ -g "!{.git,node_modules,vendor,pack,plugins}/*" '
" Optional to add if only want certain files:
" \ -g "*.{js,json,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"

" Bind a new Rg command that uses FZF to search
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)

" Use Rg Command to search word under cursor
nnoremap <C-p>a :Rg! <cword><CR>
" }}}

" Search and Replace word under cursor
nmap <leader>w :s/\(<c-r>=expand("<cword>")<cr>\)/


nnoremap <Leader>u :UndotreeToggle<cr>

" {{{ Tagbar Plugin Settings
nnoremap <silent> <Leader>b :TagbarToggle<CR>
" }}}

" nnoremap <F5> <esc>:w<enter>:!%:p<enter>
" inoremap <F5> <esc>:w<enter>:!%:p<enter>

autocmd filetype crontab setlocal nobackup nowritebackup

au BufRead,BufNewFile *.md setlocal textwidth=80
" Ledger files with .ldg extentions
au BufNewFile,BufRead *.ldg,*.ledger,*.journal setf ledger

if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" For local replace
nnoremap gr gd[{V%::s/<C-R>///gc<left><left><left>

" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>
" Open splits bottom right
set splitbelow
set splitright


" Ultisnips settings {{{
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:snips_author="Neil Grogan"
let g:snips_github="dueyfinster"
let g:snips_email="neil@ngrogan.com"
" }}}


let g:rooter_patterns = ['Rakefile', 'pom.xml', '.git/', 'Gemfile', 'package.json']

function! RunInProjectDir(cmd)
  let root_dir = FindRootDirectory()
  if !empty(root_dir)
    VimuxRunCommand("cd ".root_dir)
  endif
  VimuxRunCommand(a:cmd)
endfunction

function! VimuxSlime()
  call VimuxSendText(@v)
  call VimuxSendKeys("Enter")
endfunction


" {{{ Git Gutter
let g:gitgutter_max_signs = 999
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>
" }}}

nnoremap <F5> <esc>:w<CR>:VimuxRunLastCommand<CR>
inoremap <F5> <esc>:w<CR>:VimuxRunLastCommand<CR>a

" Vimux Settings {{{

" Run the current project build
map <Leader>rn :call RunInProjectDir("npm run")<CR>
map <Leader>rm :call RunInProjectDir("make run")<CR>
"map <Leader>rm :call RunInProjectDir("mvn clean install")<CR>
map <Leader>rd :call RunInProjectDir("./run-docker.sh")<CR>
:let maplocalleader = "\\"
" If text is selected, save it in the v buffer and send to tmux
vmap <LocalLeader>vs "vy :call VimuxSlime()<CR>
" Select Paragraph and send to Tmux pane
nmap <LocalLeader>vs vip<LocalLeader>vs<CR>

" Inspect runner pane map
map <Leader>vi :VimuxInspectRunner<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>
" Zoom the tmux runner page
map <Leader>vz :VimuxZoomRunner<CR>
" Clear the tmux history of the runner pane
map <Leader>vc :VimuxClearRunnerHistory<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>
" Prompt for a command to run
vmap <Leader>vp "vy :call VimuxPromptCommand(@v)<CR>

" }}}

