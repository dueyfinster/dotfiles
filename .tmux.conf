# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g history-limit 10000 # set a longer scrollback history
set -g base-index 1 # start window indexing at one instead of zero
setw -g pane-base-index 1 # start pane indexing at one instead of zero
setw -g automatic-rename on # rename windows with current command
set -g default-terminal "screen-256color"
set -g renumber-windows on
setw -g mode-keys vi # turn vi mode on
setw -g mouse on # Mouse support - set to on if you want to use the mouse
setw -g monitor-activity on # turn onitor activity on
set -g set-titles on # enable window titles
set -g set-titles-string '#T' # window title string (uses statusbar variables)
set -sg escape-time 0 # No delay for escape key press

unbind C-b # Allow Tmux in Tmux session, using C-a a <command>
set -g prefix C-a # Set new prefix for Tmux
bind C-a send-prefix # Set prefix for nested Tmux
bind-key -n C-j detach


# Reload config file
bind-key -n M-r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# synchronize all panes in a window
bind y setw synchronize-panes


###
# Sessions
###
# Switching Sessions
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"(tmux display-message -p '#S')\" | fzf --reverse | xargs tmux switch-client -t"
#Bash version
#bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
bind-key -n M-s choose-session

###
# Windows
###

# New Window
bind-key -n M-n new-window -c "#{pane_current_path}"

# Select Windows 
bind-key -n M-1 select-window -t :1
bind-key -n M-2 select-window -t :2
bind-key -n M-3 select-window -t :3
bind-key -n M-4 select-window -t :4
bind-key -n M-5 select-window -t :5
bind-key -n M-6 select-window -t :6
bind-key -n M-7 select-window -t :7
bind-key -n M-8 select-window -t :8
bind-key -n M-9 select-window -t :9
bind-key -n M-0 select-window -t :0

# Move windows
bind-key -n M-. select-window -n
bind-key -n M-, select-window -p

# Swap Windows
bind-key -n M-< swap-window -t -1
bind-key -n M-> swap-window -t +1

#split window and fix path for tmux 1.9
bind-key -n M-v split-window -h -c "#{pane_current_path}"
bind-key -n M-| split-window -h -c "#{pane_current_path}"
bind-key -n M-b split-window -v -c "#{pane_current_path}"
bind-key -n M-- split-window -v -c "#{pane_current_path}"

# Kill Window
bind-key -n M-X confirm-before "kill-window"

###
# Panes
###

bind-key b break-pane -d # break pane out to window
# Prompted join-pane
bind-key C-j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
# Easily swap a pane (targeted by pane number) with the current pane
bind-key C-s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# Vim Style
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R
# Use Alt-arrow keys without prefix key to switch panes
bind-key -n M-Left select-pane -L
bind-key -n M-Right select-pane -R
bind-key -n M-Up select-pane -U
bind-key -n M-Down select-pane -D

# Kill pane
bind-key -n M-x confirm-before "kill-pane"

# smart pane switching with awareness of vim splits
#bind -n M-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
#bind -n M-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
#bind -n M-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
#bind -n M-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
#bind -n M-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Swap panes Meta + H, J, K or k
bind-key -n "M-H" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -L; tmux swap-pane -t $old'
bind-key -n "M-J" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -D; tmux swap-pane -t $old'
bind-key -n "M-K" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -U; tmux swap-pane -t $old'
bind-key -n "M-L" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -R; tmux swap-pane -t $old'

# Swap panes Meta + Shift + Up, Down, Left or Right arrow
bind-key -n "M-S-Left" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -L; tmux swap-pane -t $old'
bind-key -n "M-S-Down" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -D; tmux swap-pane -t $old'
bind-key -n "M-S-Up" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -U; tmux swap-pane -t $old'
bind-key -n "M-S-Right" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -R; tmux swap-pane -t $old'

bind-key -n M-f resize-pane -Z # Make Pane full screen
# Pane Resizing (Vim Style)
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5

####
# Copy and Paste (Vim Style)
####
set -g set-clipboard on
bind-key p run-shell 'xclip -o | tmux load-buffer - && tmux paste-buffer'
bind-key C-v run-shell 'xclip -o -selection clipboard | tmux load-buffer - && tmux paste-buffer'
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-pipe 'xclip -in -selection primary'
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'xclip -in -selection primary'
bind-key -T copy-mode-vi C-c send -X copy-pipe 'xclip -in -selection clipboard'
bind-key -T copy-mode-vi 'c' send-keys -X copy-pipe-and-cancel "tmux-copy-with-osc-52"
unbind-key MouseDown2Pane
bind-key -T root MouseDown2Pane run-shell 'xclip -o | tmux load-buffer - && tmux paste-buffer'
# Darwin overrides.
if-shell 'test "$(uname -s)" = Darwin' "bind-key p run-shell 'pbpaste | tmux load-buffer - && tmux paste-buffer'"
if-shell 'test "$(uname -s)" = Darwin' "bind-key C-v run-shell 'pbpaste | tmux load-buffer - && tmux paste-buffer'"
if-shell 'test "$(uname -s)" = Darwin' "bind-key -T copy-mode-vi y send -X copy-pipe 'pbcopy'"
if-shell 'test "$(uname -s)" = Darwin' "bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'pbcopy'"
if-shell 'test "$(uname -s)" = Darwin' "bind-key -T copy-mode-vi C-c send -X copy-pipe 'pbcopy'"
if-shell 'test "$(uname -s)" = Darwin' "bind-key -T root MouseDown2Pane run-shell 'pbpaste | tmux load-buffer - && tmux paste-buffer'"


###
# Status Bar
###
set -g status-justify centre        # center window list for clarity
#set-option -g status-position top  # position the status bar at top of screen

# set color for status bar
set-option -g status-bg colour235 #base02
set-option -g status-fg yellow #yellow
set-option -g status-interval 60 # Default is 15.
# set-option -g status-attr dim
set-option -g status-right "#[fg=yellow,bold,italics]$USER@#h#[bg=red,fg=black]%l:%M%p"

# set window list colors - red for active and cyan for inactive
#set-window-option -g window-status-fg brightblue #base0
#set-window-option -g window-status-bg colour236
#set-window-option -g window-status-attr dim

#set-window-option -g window-status-current-fg brightred #orange
#set-window-option -g window-status-current-bg colour236
#set-window-option -g window-status-current-attr bright

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'
